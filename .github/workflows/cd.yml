name: CD-Staging-Docker-Bulletproof

on:
  push:
    branches:
      - development

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Checkout code
      - uses: actions/checkout@v4

      # Docker Hub login
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      # Build Docker image with commit SHA tag
      - name: Build Docker image
        run: |
          IMAGE_TAG=${GITHUB_SHA::7}  # first 7 chars of commit SHA
          docker build -t atharva045/inspireapi:$IMAGE_TAG -f docker/dockerfile.staging .
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

      # Push image to Docker Hub (SHA only)
      - name: Push Docker image
        run: |
          docker push atharva045/inspireapi:$IMAGE_TAG

      # Deploy on EC2
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USER }}
          key: ${{ secrets.STAGING_SSH_KEY }}
          port: 22
          script: |
            IMAGE_TAG=${GITHUB_SHA::7}
            cd /var/www/backend

            # Stop old container if exists
            docker rm -f backend-staging || true

            # Run new container directly
            docker run -d --name backend-staging -p 5000:5000 --env-file /var/www/backend/.env atharva045/inspireapi:$IMAGE_TAG

            # Health check (ping port)
            sleep 5
            if ! curl -s http://localhost:5000/ > /dev/null; then
              echo "Deployment failed, rolling back!"
              docker rm -f backend-staging || true
            fi

            # Cleanup old images
            docker images -q | grep -vFf <(docker ps -a --format '{{.Image}}' | sort | uniq)
