name: CD-Staging-Docker-Bulletproof

on:
  push:
    branches:
      - develop
  workflow_dispatch: # Allow manual triggers

env:
  REGISTRY: docker.io
  IMAGE_NAME: atharva045/inspireapi
  CONTAINER_NAME: backend-staging
  PORT: 5000

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=sha,prefix={{branch}}-,suffix=-{{date 'YYYYMMDD-HHmmss'}},format=short
            type=ref,event=branch
            type=raw,value=staging-latest

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment: staging

    steps:
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USER }}
          key: ${{ secrets.STAGING_SSH_KEY }}
          port: ${{ secrets.STAGING_SSH_PORT || 22 }}
          timeout: 60s
          script_stop: true
          script: |
            set -e  # Exit on any error

            # Extract image tag from the build job
            IMAGE_TAG="${{ needs.build.outputs.image-tag }}"
            echo "Deploying image: $IMAGE_TAG"

            # Navigate to deployment directory
            cd /var/www/backend

            # Create backup of current state
            BACKUP_CONTAINER="backend-staging-backup-$(date +%s)"
            if docker ps -a --format 'table {{.Names}}' | grep -q "^${{ env.CONTAINER_NAME }}$"; then
              echo "Creating backup of current container..."
              docker commit ${{ env.CONTAINER_NAME }} $BACKUP_CONTAINER || true
            fi

            # Pull the new image
            echo "Pulling new image..."
            docker pull $IMAGE_TAG

            # Stop and remove old container
            echo "Stopping old container..."
            docker stop ${{ env.CONTAINER_NAME }} || true
            docker rm ${{ env.CONTAINER_NAME }} || true

            # Start new container with health check
            echo "Starting new container..."
            docker run -d \
              --name ${{ env.CONTAINER_NAME }} \
              -p ${{ env.PORT }}:${{ env.PORT }} \
              --env-file /var/www/backend/.env \
              --restart unless-stopped \
              --health-cmd="curl -f http://localhost:${{ env.PORT }}/health || exit 1" \
              --health-interval=30s \
              --health-timeout=10s \
              --health-retries=3 \
              --health-start-period=60s \
              --log-driver=json-file \
              --log-opt max-size=10m \
              --log-opt max-file=3 \
              $IMAGE_TAG

            # Wait for container to be healthy
            echo "Waiting for health check..."
            RETRY_COUNT=0
            MAX_RETRIES=12

            while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
              HEALTH_STATUS=$(docker inspect --format='{{.State.Health.Status}}' ${{ env.CONTAINER_NAME }} 2>/dev/null || echo "none")
              
              if [ "$HEALTH_STATUS" = "healthy" ]; then
                echo "✅ Container is healthy!"
                break
              elif [ "$HEALTH_STATUS" = "unhealthy" ]; then
                echo "❌ Container failed health check"
                exit 1
              else
                echo "⏳ Waiting for health check... ($((RETRY_COUNT + 1))/$MAX_RETRIES)"
                sleep 10
                RETRY_COUNT=$((RETRY_COUNT + 1))
              fi
            done

            if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
              echo "❌ Health check timeout - rolling back!"
              
              # Stop failed container
              docker stop ${{ env.CONTAINER_NAME }} || true
              docker rm ${{ env.CONTAINER_NAME }} || true
              
              # Attempt rollback if backup exists
              if docker images --format 'table {{.Repository}}:{{.Tag}}' | grep -q "$BACKUP_CONTAINER"; then
                echo "Rolling back to previous version..."
                docker run -d \
                  --name ${{ env.CONTAINER_NAME }} \
                  -p ${{ env.PORT }}:${{ env.PORT }} \
                  --env-file /var/www/backend/.env \
                  --restart unless-stopped \
                  $BACKUP_CONTAINER
              fi
              
              exit 1
            fi

            # External health check
            echo "Performing external health check..."
            if ! curl -f -s --max-time 10 http://localhost:${{ env.PORT }}/health > /dev/null; then
              echo "❌ External health check failed!"
              exit 1
            fi

            echo "✅ Deployment successful!"

            # Cleanup old images (keep last 3)
            echo "Cleaning up old images..."
            docker images ${{ env.IMAGE_NAME }} --format "table {{.Repository}}:{{.Tag}}\t{{.CreatedAt}}" | \
              tail -n +2 | sort -k2 -r | tail -n +4 | awk '{print $1}' | \
              xargs -r docker rmi || true

            # Clean up backup containers older than 24 hours
            docker ps -a --filter "name=backend-staging-backup-" --format "{{.Names}}\t{{.CreatedAt}}" | \
              awk '$2 " " $3 " " $4 " " $5 " " $6 < "'$(date -d '24 hours ago' '+%Y-%m-%d %H:%M:%S')'" {print $1}' | \
              xargs -r docker rm || true

            # General cleanup
            docker system prune -f --volumes || true

  notify:
    needs: [build, deploy]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Notify deployment status
        if: secrets.SLACK_WEBHOOK_URL != '' || secrets.DISCORD_WEBHOOK_URL != ''
        run: |
          if [ "${{ needs.deploy.result }}" == "success" ]; then
            STATUS="✅ SUCCESS"
            COLOR="good"
            MESSAGE="Staging deployment completed successfully"
          else
            STATUS="❌ FAILED" 
            COLOR="danger"
            MESSAGE="Staging deployment failed"
          fi

          # Add webhook notifications here if needed
          echo "Deployment Status: $STATUS"
          echo "Message: $MESSAGE"
